% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{smart.restart.grid.search}
\alias{smart.restart.grid.search}
\title{Grid search for the restart parameter in RWR}
\usage{
smart.restart.grid.search(
  g.min,
  g.max,
  n.1,
  levels = 3,
  ig,
  n.adj.M,
  seeds,
  filtering_rate
)
}
\arguments{
\item{g.min}{(numeric): minimum grid value}

\item{g.max}{(numeric): maximum grid value}

\item{n.1}{(integer): number of grid points to search at first level}

\item{levels}{(integer): number of levels to search}

\item{ig}{input graph}

\item{n.adj.M}{(matrix): normalized adjacency matrix}

\item{seeds}{vector of seed values}

\item{filtering_rate}{(numeric): quantile for shifting the raw RWR scores}
}
\value{
a list containing an igraph object, subnetwork score, and restart value
}
\description{
Grid search for the restart parameter in RWR. For use inside \code{amend()} and \code{run_AMEND()}
}
\details{
This is a multi-level grid search. The first level is simply a grid search. For the subsequent levels, the neighborhood about the optimal grid value from the previous level is searched. Stops when no improvement in network score or maximum number of levels is reached.
}
\examples{
library(igraph)

# Creating an adjacency matrix and graph
adjm = matrix(c(0, 1, 0, 0, 0, 0, 0, 0,
               1, 0, 1, 1, 1, 0, 0, 0,
               0, 1, 0, 0, 1, 1, 0, 0,
               0, 1, 0, 0, 0, 0, 1, 0,
               0, 1, 1, 0, 0, 0, 1, 1,
               0, 0, 1, 0, 0, 0, 0, 0,
               0, 0, 0, 1, 1, 0, 0, 0,
               0, 0, 0, 0, 1, 0, 0, 0), nrow = 8)
g = graph_from_adjacency_matrix(adjm, mode = 'undirected')
V(g)$name = 1:8

# Normalizing the adjacency matrix
adj_norm = adjm \%*\% diag(1 / degree(g))

# Creating a named vector of seed values
seeds = runif(8)
names(seeds) = 1:8

search = AMEND:::smart.restart.grid.search(g.min = 0.1, g.max = 0.9, n.1 = 10, levels = 3,
                                           ig = g, n.adj.M = adj_norm, seeds = seeds,
                                           filtering_rate = 0.3)

}
