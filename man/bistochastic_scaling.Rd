% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{bistochastic_scaling}
\alias{bistochastic_scaling}
\title{Scale a transition matrix to be approximately bistochastic.}
\usage{
bistochastic_scaling(trans_mat)
}
\arguments{
\item{trans_mat}{A transition matrix}
}
\value{
A left stochastic transition matrix
}
\description{
This function uses Iterative Proportional Fitting to modify the input left-stochastic matrix such that the row and column sums all equal 1. The diagonal element in each column is then redistributed evenly to the other non-zero elements of that column.
}
\details{
The purpose of this function is to mitigate degree bias that is present in PPI networks by directly manipulating the transition matrix to be used in RWR.

The stationary distribution of a Markov chain can be viewed as a measure of centrality. These are the values at which each node has total in-flow equal to total out-flow. Any initial distribution will converge to this distribution in the long run.

For transition matrices obtained by column-normalizing an adjacency matrix, the stationary probabilities are proportional to node degree. If the goal is to minimize the influence that degree has on propagation scores, while still recognizing that all else being equal a higher-degree node should have more weight than a lower-degree node,
we should aim to squeeze stationary probabilities towards some global mean, since the stationary probability is a good proxy for the amount of influence degree has on propagation scores. The metric that best captures this goal is the entropy of the stationary distribution.

A bistochastic (doubly stochastic) matrix has a uniform stationary distribution, which represents a stationary distribution with maximum entropy.
There are matrix scaling methods that modify a matrix to conform to the row and column sums of some target matrix, while still being as similar as possible to the original matrix. Here we use Iterative Proportional Fitting (IPF) to arrive at an approximately bistochastic matrix from an input transition matrix.

To ensure convergence of IPF, it is necessary to add self-loops, i.e., non-zero diagonal elements. Interestingly, these diagonal elements mostly vanish to zero except for very low-degree nodes.
After obtaining an approximately bistochastic matrix, it is desirable to remove the self-loops, since this was only added for convergence considerations and the original matrix had zeros along the diagonal.
To do this, the diagonal elements are evenly redistributed to the non-zero elements of the column, thus upsetting the bistochastic approximation but preserving column sums. However, the resulting left-stochastic matrix is still much closer to being bistochastic than originally, and this is reflected by an increase in the entropy of the associated stationary distribution.
}
\examples{
# Calculate the entropy of a vector
entropy = function(x){
  tmp = ifelse(round(x, 20) == 0, 0, -x * log(x))
  sum(tmp)
}
# Calculate the stationary distribution of the transition matrix of an irreducible markov chain
stationary.distr = function(x){
  e = Re(RSpectra::eigs(A = x, k = 1, which = "LM")$vectors[,1])
  e / sum(e)
}
d = igraph::degree(glut4_graph) # node degrees of the graph
# normalizing adjacency matrix to get transition matrix
adj_norm = AMEND::transition_matrix(glut4_graph, glut4_adjM, norm = "degree")
p1 = stationary.distr(adj_norm)
e1 = entropy(p1)
# Perform bistochastic scaling
# This aims to maximize entropy of stationary distribution of transition matrix
adj_norm = AMEND::bistochastic_scaling(trans_mat = adj_norm)
p2 = stationary.distr(adj_norm)
e2 = entropy(p2)

# Compare before and after
e1 < e2
plot(d, p1, xlab = "Degree", ylab = "Stationary Distribution",
     main = paste0("Before (entropy=", round(e1, 3),")"), ylim = c(0, 0.01))
abline(a = 0, b = 1 / sum(d), xpd = FALSE)
plot(d, p2, xlab = "Degree", ylab = "Stationary Distribution",
     main = paste0("After (entropy=", round(e2, 3),")"), ylim = c(0, 0.01))
abline(a = 0, b = 1 / sum(d), xpd = FALSE)

}
