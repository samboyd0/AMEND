% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RandomWalk.R
\name{transition_matrix}
\alias{transition_matrix}
\title{Create a transition matrix from the adjacency matrix of a graph}
\usage{
transition_matrix(
  adjM,
  norm = c("degree", "modified_degree"),
  k = 0.5,
  heterogeneous = FALSE,
  multiplex = FALSE,
  jump.prob,
  switch.layer.prob,
  brw.attr = NULL
)
}
\arguments{
\item{adjM}{Adjacency matrix}

\item{norm}{Normalization method}

\item{k}{Value between 0 and 1. When norm = "modified_degree", the adjacency matrix is first left and right multiplied by a diagonal matrix of node degrees raised to the power -k. As k increases, edge weights are penalized more for the degrees of their adjacent nodes.}

\item{heterogeneous}{Logical. If TRUE, graph is considered heterogeneous (more than one distinct node type, e.g., proteins and metabolites), and node_type must be included as an argument or graph vertex attribute.}

\item{multiplex}{Logical. If true, graph is assumed to contain multiplex components.}

\item{jump.prob}{A named vector, or NULL. Probability of random walker jumping from one component of graph to another in RWR. Only used when heterogeneous=TRUE.}

\item{switch.layer.prob}{A named list of named vectors, or NULL. Probability of random walker to switch from current layer in a multiplex to another layer in same component. List element names correspond to multiplex components, and vector names correspond to layers within a multiplex.}

\item{brw.attr}{A numeric vector or NULL. Biased random walk vertex attribute values. Should be non-negative, with values greater (lesser) than 1 increasing (decreasing) transition probabilities to a node in RWR. If NULL, all nodes are given a value of 1.}
}
\value{
transition matrix
}
\description{
\code{transition_matrix()} creates a transition matrix from the adjacency matrix of a graph for input into random walk with restart (RWR).
}
\details{
There are two normalization schemes available.
\itemize{
\item degree: Divides each column of the adjacency matrix by the column total
\item modified_degree: First creates a modified adjacency matrix by left and right multiplying the adjacency matrix by a diagonal matrix raised to the power of -k, whose diagonal elements are the column sums of the original adjacency matrix. Then proceed to column-normalize this modified adjacency matrix.
}

For multiplex/heterogeneous networks, the normalization process requires more steps. First, all multiplex and layer-to-layer bipartite matrices are column-normalized independently. For the multiplex component, this involves normalizing each inter- and intra-layer matrix independently such that their columns sum to one. Then \emph{switch.layer.prob} is applied to the columns of the entire multiplex adjacency matrix such that these now sum to one. Finally, \emph{jump.prob} is applied to the columns of the supra-adjacency matrix (i.e., matrix of the whole integrated graph) such that these sum to one.
}
\examples{

library(igraph)

# Creating an adjacency matrix and graph
adjm = Matrix::Matrix(c(0, 1, 0, 0, 0, 0, 0, 0,
                      1, 0, 1, 1, 1, 0, 0, 0,
                      0, 1, 0, 0, 1, 1, 0, 0,
                      0, 1, 0, 0, 0, 0, 1, 0,
                      0, 1, 1, 0, 0, 0, 1, 1,
                      0, 0, 1, 0, 0, 0, 0, 0,
                      0, 0, 0, 1, 1, 0, 0, 0,
                      0, 0, 0, 0, 1, 0, 0, 0), nrow = 8)
g = graph_from_adjacency_matrix(adjm, mode = 'undirected')

adj_norm = transition_matrix(adjM = adjm, norm = "degree")

}
\seealso{
\code{\link[=run_AMEND]{run_AMEND()}}, \code{\link[=RWR]{RWR()}}, \code{\link[=create_integrated_graph]{create_integrated_graph()}}
}
