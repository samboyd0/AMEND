% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{run_AMEND}
\alias{run_AMEND}
\title{Pipeline for AMEND workflow}
\usage{
run_AMEND(
  graph,
  n = 25,
  eta = NULL,
  data.type = c("ECI", "logFC", "p_val"),
  eci.direction = c("positive", "negative"),
  logFC.direction = c("positive", "negative", "both"),
  adj_matrix = NULL,
  node_scores = NULL,
  normalize = c("core", "degree"),
  seed.weight = 0.5,
  max_it = 3,
  n_particles = 3,
  random_seed = NULL,
  verbose = F
)
}
\arguments{
\item{graph}{an igraph object with experimental data as vertex attribute. Either graph or adj_matrix and node_scores must be specified}

\item{n}{(integer): approximate size of the final module. Used for setting the filtering rate schedule}

\item{eta}{(numeric): starting filtering rate. If NULL (default), determines optimal value through PSO}

\item{data.type}{(character): one of ECI, logFC, or p_val. If graph is specified, must have matching vertex attribute}

\item{eci.direction}{(character): direction of interest for ECI values. negative or positive}

\item{logFC.direction}{(character): direction of interest for log fold change values. negative, positive, or both. When "both" is specified, the absolute value of logFC is taken}

\item{adj_matrix}{(matrix): adjacency matrix of network. Either graph or adj_matrix and node_scores must be specified}

\item{node_scores}{vector of node scores}

\item{normalize}{(character): normalization scheme of adjacency matrix for random walk with restart}

\item{seed.weight}{(numeric): Relative weight to give to nodes not in the direction of interest in random walk with restart, between 0 and 1}

\item{max_it}{(integer): maximum number of iterations for PSO}

\item{n_particles}{(integer): number of particles for PSO}

\item{random_seed}{(integer): random seed. If NULL (default), no seed is set by the user}

\item{verbose}{(logical): Whether to output current iteration number to show progress}
}
\value{
a named list with the following elements:
\itemize{
\item module: the final module (i.e., subnetwork)
\item score: final module score
\item subnetworks: a list of node names contained in intermediate subnetworks
\item stats: network statistics
\item time: run time
\item input_params: list of input parameters
}
}
\description{
\code{run_AMEND()} performs all steps of the AMEND workflow, including setting the starting filtering rate through PSO and identifying an 'active' module.
}
\details{
AMEND is an active module identification method. An active module is a subset of connected nodes in an interaction network that have relatively large experimental values.
AMEND takes as input a protein-protein interaction (PPI) network and node-wise summaries of experimental data (e.g., log fold change from a RNA-seq differential expression analysis). It returns a single connected subnetwork (i.e., module).

The final module is found in an iterative manner by applying random walk with restart (RWR) on the network to get node weights, which are then shifted by a certain quantile of the RWR weights (termed the filtering rate) so that there are both negative and positive values.
These shifted RWR weights are used to find the maximum-weight connected subgraph. This new subgraph is input into RWR again and the process repeats until there is no change between iterations. The subnetwork with largest score is returned as the final module.

The filtering rate changes at each iteration following an exponential decay schedule, with the starting filtering rate determined by particle swarm optimization (PSO).

The network score is the product of the average standardized experimental values and the average core-clustering coefficient of the nodes in the network. The experimental values (e.g., log fold changes) are standardized w.r.t. the entire dataset.

See \url{/link/to/paper}.
}
\examples{
# Attach igraph library
library(igraph)

# Inspect the igraph object included in AMEND package.
# One can see it has vertex attributes name, symbol, and ECI
glut4_graph
head(V(glut4_graph)$ECI)

\dontrun{
# Use run_AMEND() with an igraph object
subnet1 = run_AMEND(graph = glut4_graph, data.type = "ECI", eci.direction = "negative",
                    max_it = 1, n_particles = 1, verbose = TRUE)

# Use run_AMEND() with an adjacency matrix and a vector of node scores
subnet2 = run_AMEND(adj_matrix = glut4_adjM, node_scores = eci_scores, data.type = "ECI",
                    eci.direction = "negative", max_it = 1, n_particles = 1, verbose = TRUE)
}

}
