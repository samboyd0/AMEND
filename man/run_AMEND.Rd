% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{run_AMEND}
\alias{run_AMEND}
\title{Identify active modules from an interaction network}
\usage{
run_AMEND(
  graph = NULL,
  adj_matrix = NULL,
  node_scores = NULL,
  node_type = NULL,
  n = 25,
  data.type = c("ECI", "logFC", "p_val", "binary", "other"),
  DOI = c("positive", "negative", "both"),
  heterogeneous = FALSE,
  normalize = c("degree", "modified_degree"),
  k = 0.5,
  eta = NULL,
  seed.weight = 0.5,
  seed.scheme = c("zero_bottom", "zero_middle"),
  jump = 0.5,
  net1.weight = 0.5,
  verbose = TRUE,
  degree.bias = FALSE,
  identifier = 1
)
}
\arguments{
\item{graph}{igraph object with experimental data as vertex attribute. Either graph or adj_matrix and node_scores must be specified}

\item{adj_matrix}{Adjacency matrix of network. Either graph or adj_matrix and node_scores must be specified. Must have either colnames or rownames}

\item{node_scores}{Named vector of node scores}

\item{node_type}{Named vector of node types. Only considered if heterogeneous=TRUE. Can only accommodate two unique node types.}

\item{n}{Approximate size of the final module}

\item{data.type}{Type of input data. If graph is specified, must have matching vertex attribute}

\item{DOI}{Direction of Interest for experimental values. One of negative, positive, or both. When "both" is specified, the absolute value is taken. Only relevant for data type ECI and logFC}

\item{heterogeneous}{Logical. If TRUE, network is considered heterogeneous (two distinct node types, e.g., proteins and metabolites). If TRUE, node_type must be included as an argument or graph vertex attribute}

\item{normalize}{Normalization scheme of adjacency matrix for random walk with restart}

\item{k}{Value between 0 and 1. When normalize = "modified_degree", the adjacency matrix is first left and right multiplied by a diagonal matrix of node degrees, which is raised to the power -k. As k increases, edge weights are penalized more for the degrees of their adjacent nodes.}

\item{eta}{Starting filtering rate. If NULL (default), a value is chosen based on the input network size and parameter 'n'}

\item{seed.weight}{Relative weight to give to nodes not in the DOI in random walk with restart, between 0 and 1}

\item{seed.scheme}{Determines how the feature-wise experimental values are transformed for use as seed values in RWR. See Details.}

\item{jump}{Probability of a random walker jumping from one network to the other in RWR (when heterogeneous=TRUE)}

\item{net1.weight}{Relative weight to give to nodes of network 1 (the first type to appear in node_type).}

\item{verbose}{Logical. Whether to output current iteration number to show progress}

\item{degree.bias}{Logical. Whether to mitigate degree bias through bistochastic scaling of transition matrix prior to RWR. See Details}

\item{identifier}{For use when performing many runs of AMEND to keep track of progress}
}
\value{
a named list with the following elements:
\itemize{
\item module: the final module (i.e., subnetwork)
\item score: final module score
\item subnetworks: a list of node names contained in intermediate subnetworks
\item stats: network statistics
\item time: run time
\item input_params: list of input parameters
}
}
\description{
Identifies an active module, i.e., subnetwork with large experimental values, thorugh an iterative optimization procedure.
}
\details{
Given an interaction network and experimental scores, AMEND attempts to find an active module by iteratively applying random walk with restart (RWR) and a heurstic solution to a maximum-weight connected subgraph problem.

Briefly, RWR is applied to the network to get propagation scores which are shifted by some percentile (filtering rate, which decreases exponentially each iteration). The network with propagation scores are input into \code{heinz()}, an algorithm that heuristically finds a subnetwork with maximum node weight. This subnetwork is assigned a score based on its mean experimental values and mean core-clustering coefficients and then input into the next iteration. The algorithm stops when there is no change between iterations, and the subnetwork with maximum score is returned.

This function can also accommodate heterogeneous networks with two node types. This information is incorporated in RWR for heterogeneous graphs (RWRH) proposed by \href{https://doi.org/10.1093/bioinformatics/btq108}{Li et al.}. This introduces the 'jump' and 'net1.weight' parameters.

The seed values used for RWR are calculated as follows. For data.type "ECI", the seeding scheme involves taking the absolute value of the ECIs then weighting those nodes NOT in the Direction of Interest (DOI) by 'seed.weight'. For data.type "logFC", the log fold changes are multiplied by -1 if the DOI is negative, 1 if the DOI is positive, and the absolute value is taken if the DOI is both. Then the values are exponentiated. For data.type "p_val", the p-values are transformed by -log10(p-value). For data.type "binary", weight is assigned uniformly to "active" nodes, i.e., nodes with a value of 1 in the binary vector. For data.type "other", no transformation is performed.

Since RWR requires seed values between 0 and 1, node scores often need to be transformed. 'seed.scheme' is used when data.type=ECI. 'zero_bottom' gives ECI values of zero the lowest weight, regardless of DOI. 'zero_middle' linearly transforms ECI values s.t. values in DOI are largest, values \emph{not} in DOI are smallest, and ECIs of zero are in the middle.

The 'degree.bias' argument indicates whether degree bias in the network, which arises from technical and study biases, should be mitigated. This is done by scaling the transition matrix to be approximately bistochastic.

See the \href{https://www.ncbi.nlm.nih.gov/pmc/articles/PMC10324253/}{manuscript} for more details on the AMEND algorithm. There have been slight modifications to the algorithm as presented in the original paper.
}
\examples{
# Attach igraph library
library(igraph)

# Inspect the igraph object included in AMEND package.
# One can see it has vertex attributes name, symbol, and ECI
glut4_graph
head(V(glut4_graph)$ECI)

\dontrun{
# Use run_AMEND() with an igraph object with a vertex attribute matching data.type arg
subnet1 = run_AMEND(graph = glut4_graph, data.type = "ECI",
                DOI = "negative")

# Use run_AMEND() with an adjacency matrix and a vector of node scores
subnet2 = run_AMEND(adj_matrix = glut4_adjM, node_scores = eci_scores,
                data.type = "ECI", DOI = "negative")
}

}
