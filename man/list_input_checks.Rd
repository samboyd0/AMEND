% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_integrated_graph.R
\name{list_input_checks}
\alias{list_input_checks}
\title{Check the list names and node labels of network list inputs}
\usage{
list_input_checks(nn, multiplex, heterogeneous)
}
\arguments{
\item{nn}{A named list of node labels}

\item{multiplex}{Logical. Is the integrated graph to be multiplex?}

\item{heterogeneous}{Logical. Is the integrated graph to be heterogeneous?}
}
\value{
named list of updated node labels
}
\description{
Check the list names and node labels of network list inputs to ensure that they follow proper naming conventions. The algorithm needs to be able to associate each node in an input network with a component and layer. The component and layer information must be present as tags in the node labels (following 'name|component_layer' format) if it cannot be unambiguously determined for each node based on the network input list name.

For example, a list input with the name 'gene' can either contain a monoplex component with or without '|gene' appended to node names, or a multiplex component with '|gene_layer' (e.g., 'gene_1', 'gene_2') appended to node names. Additionally, a multiplex component can be represented by giving each layer separately in the network input list, with possible names 'gene_1', 'gene_2', etc. Bipartite list inputs (i.e., containing more than one component) must be named with components separated by ';' (e.g., 'gene;drug').
}
\details{
For internal use within \code{create_integrated_graph()} only.
}
\examples{
# Assume a multiplex-heterogeneous network of genes and drugs. The gene component is multiplex.
# Create hypothetical list of node names.
# The list names are taken from the network list inputs, and the node labels are taken from
#   the nodes of the network objects themselves.
node_names1 = list(gene = c("g1|gene_1", "g2|gene_1", "g3|gene_1", "g4|gene_1",
                            "g1|gene_2", "g2|gene_2", "g3|gene_2"),
                   drug = c("d1", "d2", "d3"),
                   "gene;drug" = c("d1|drug", "g1", "g2"))

node_names2 = list(gene_1 = c("g1", "g2", "g3", "g4"),
                   gene_2 = c("g1", "g2", "g3"),
                   drug = c("d1", "d2", "d3"),
                   "gene;drug" = c("d1|drug", "d2", "g1|gene_1", "g1|gene_2", "g2|gene_1"))

update_names1 = list_input_checks(nn = node_names1, multiplex = TRUE, heterogeneous = TRUE)
update_names2 = list_input_checks(nn = node_names2, multiplex = TRUE, heterogeneous = TRUE)
update_names1
update_names2

}
